{"version":3,"sources":["Chart.jsx","App.js","reportWebVitals.js","index.js"],"names":["Chart","props","label","color","onlyBrush","useState","data","setData","isLoading","setIsLoading","useEffect","fetch","then","response","text","content","converted","readString","delimiter","header","map","row","Close","parseFloat","ResponsiveContainer","width","height","LineChart","syncId","margin","top","right","left","bottom","XAxis","dataKey","YAxis","type","Brush","fill","style","textAlign","marginTop","CartesianGrid","strokeDasharray","padding","Tooltip","Line","stroke","dot","colors","currencies","value","cur","i","length","App","defaultSelection","selected","setSelected","fluid","xs","md","e","defaultValue","isMulti","name","options","className","classNamePrefix","onChange","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f62f98bf.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport { readString } from \"react-papaparse\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Brush,\n} from \"recharts\";\n\nconst Chart = (props) => {\n  const { label, color, onlyBrush = false, } = props;\n\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(`datasets/${label}.csv`)\n      .then((response) => response.text())\n      .then((content) => {\n        const parsed = readString(content, { delimiter: \",\", header: true });\n        const converted = parsed.data.map((row) => ({\n          ...row,\n          Close: parseFloat(row.Close),\n        }));\n        setData(converted);\n        setIsLoading(false);\n      });\n    }, []);\n    \n    if(onlyBrush) {\n      return (\n        <ResponsiveContainer width=\"100%\" height={45}>\n        <LineChart\n          width={500}\n          height={400}\n          data={data}\n          syncId=\"cryptoCharts\"\n          margin={{\n            top: 10,\n            right: 30,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <XAxis dataKey=\"Date\" />\n          <YAxis\n            type={\"number\"}\n          />\n          <Brush data={data} dataKey=\"Date\" fill={\"#f29e4c\"} />\n        </LineChart>\n        </ResponsiveContainer>\n      );\n  \n  }\n\n  if (isLoading) {\n    return <h4 style={{ textAlign: \"center\", marginTop: \"10%\" }}>Loading</h4>;\n  }\n  return (\n    <div style={{ width: \"100%\" }}>\n      <h4>{label}</h4>\n\n      <ResponsiveContainer width=\"100%\" height={200}>\n        <LineChart\n          width={500}\n          height={400}\n          data={data}\n          syncId=\"cryptoCharts\"\n          margin={{\n            top: 10,\n            right: 30,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"Date\" />\n          <YAxis\n            type={\"number\"}\n            padding={{ bottom: 10, top: 10 }}\n            label=\"USD\"\n          />\n          <Tooltip />\n          <Line\n            type=\"monotone\"\n            dataKey=\"Close\"\n            stroke={color}\n            fill={color}\n            dot={false}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default Chart;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport Select from \"react-select\";\n\nimport Chart from \"./Chart\";\n\nimport \"./App.css\";\n\nconst colors = [\n  \"#54478c\",\n  \"#2c699a\",\n  \"#048ba8\",\n  \"#0db39e\",\n  \"#16db93\",\n  \"#83e377\",\n  \"#b9e769\",\n  \"#efea5a\",\n  \"#f1c453\",\n  \"#f29e4c\",\n];\n\nconst currencies = [\n  {\n    label: \"BinanceCoin\",\n    value: \"BinanceCoin\",\n  },\n  {\n    label: \"Bitcoin\",\n    value: \"Bitcoin\",\n  },\n  {\n    value: \"BitcoinCash\",\n    label: \"BitcoinCash\",\n  },\n  {\n    value: \"BitcoinSV\",\n    label: \"BitcoinSV\",\n  },\n  {\n    label: \"Cardano\",\n    value: \"Cardano\",\n  },\n  {\n    label: \"EOS\",\n    value: \"EOS\",\n  },\n  {\n    label: \"Ethereum\",\n    value: \"Ethereum\",\n  },\n  {\n    label: \"Litecoin\",\n    value: \"Litecoin\",\n  },\n  {\n    label: \"Stellar\",\n    value: \"Stellar\",\n  },\n  {\n    label: \"Tether\",\n    value: \"Tether\",\n  },\n  {\n    label: \"Tezos\",\n    value: \"Tezos\",\n  },\n  {\n    label: \"XRP\",\n    value: \"XRP\",\n  },\n].map((cur, i) => ({ ...cur, color: colors[i % colors.length] }));\n\nfunction App() {\n  const defaultSelection = [currencies[2], currencies[4]];\n  const [selected, setSelected] = useState([]);\n\n  useEffect(() => {\n    setSelected(defaultSelection);\n  }, []);\n\n  return (\n    <Grid fluid>\n      <Row style={{ marginTop: 15 }}>\n        <Col xs={12} md={12}>\n          <h3>Histórico de precios de Criptomonedas</h3>\n        </Col>\n      </Row>\n      <Row>\n        {selected.map((e, i) => {\n          return (\n            <Col xs={6} md={4} key={i}>\n              <Chart {...e} />\n            </Col>\n          );\n        })}\n      </Row>\n      <Row style={{ marginTop: 15 }}>\n        <Col xs={12} md={12}>\n          <Chart onlyBrush={true} label={\"Bitcoin\"} />\n        </Col>\n      </Row>\n      <Row style={{ marginTop: 15 }}>\n        <Col xs={12} md={12}>\n          <Select\n            defaultValue={defaultSelection}\n            isMulti\n            name=\"currencies-select\"\n            options={currencies}\n            className=\"basic-multi-select\"\n            classNamePrefix=\"select\"\n            onChange={setSelected}\n          />\n        </Col>\n      </Row>\n      <Row style={{ marginTop: 15 }}>\n        <Col xs={12} md={12}>\n          <p>* Agregar demasiadas gráficas podría bajar el desempeño significativamente.</p>\n        </Col>\n      </Row>\n    </Grid>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}